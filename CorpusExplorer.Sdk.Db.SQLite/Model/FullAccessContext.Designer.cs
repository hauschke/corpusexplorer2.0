//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 21.01.2019 13:48:49
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace CorpusExplorer.Sdk.Db.SQLite.Model.FullAccess
{

    [DatabaseAttribute(Name = "Data")]
    [ProviderAttribute(typeof(Devart.Data.SQLite.Linq.Provider.SQLiteDataProvider))]
    public partial class FullAccessContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(FullAccessContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertCorpus(Corpus instance);
        partial void UpdateCorpus(Corpus instance);
        partial void DeleteCorpus(Corpus instance);
        partial void InsertCorpusMetadata(CorpusMetadata instance);
        partial void UpdateCorpusMetadata(CorpusMetadata instance);
        partial void DeleteCorpusMetadata(CorpusMetadata instance);
        partial void InsertDocument(Document instance);
        partial void UpdateDocument(Document instance);
        partial void DeleteDocument(Document instance);
        partial void InsertDocumentMetadata(DocumentMetadata instance);
        partial void UpdateDocumentMetadata(DocumentMetadata instance);
        partial void DeleteDocumentMetadata(DocumentMetadata instance);
        partial void InsertToken(Token instance);
        partial void UpdateToken(Token instance);
        partial void DeleteToken(Token instance);
        partial void InsertAnnotation(Annotation instance);
        partial void UpdateAnnotation(Annotation instance);
        partial void DeleteAnnotation(Annotation instance);
        partial void InsertLayer(Layer instance);
        partial void UpdateLayer(Layer instance);
        partial void DeleteLayer(Layer instance);
        partial void InsertLayerValue(LayerValue instance);
        partial void UpdateLayerValue(LayerValue instance);
        partial void DeleteLayerValue(LayerValue instance);
        partial void InsertAnnotationSpan(AnnotationSpan instance);
        partial void UpdateAnnotationSpan(AnnotationSpan instance);
        partial void DeleteAnnotationSpan(AnnotationSpan instance);

        #endregion

        public FullAccessContext() :
        base(GetConnectionString("FullAccessContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public FullAccessContext(MappingSource mappingSource) :
        base(GetConnectionString("FullAccessContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public FullAccessContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public FullAccessContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public FullAccessContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public FullAccessContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Corpus> Corpora
        {
            get
            {
                return this.GetTable<Corpus>();
            }
        }

        public Devart.Data.Linq.Table<CorpusMetadata> CorpusMetadatas
        {
            get
            {
                return this.GetTable<CorpusMetadata>();
            }
        }

        public Devart.Data.Linq.Table<Document> Documents
        {
            get
            {
                return this.GetTable<Document>();
            }
        }

        public Devart.Data.Linq.Table<DocumentMetadata> DocumentMetadatas
        {
            get
            {
                return this.GetTable<DocumentMetadata>();
            }
        }

        public Devart.Data.Linq.Table<Token> Tokens
        {
            get
            {
                return this.GetTable<Token>();
            }
        }

        public Devart.Data.Linq.Table<Annotation> Annotations
        {
            get
            {
                return this.GetTable<Annotation>();
            }
        }

        public Devart.Data.Linq.Table<Layer> Layers
        {
            get
            {
                return this.GetTable<Layer>();
            }
        }

        public Devart.Data.Linq.Table<LayerValue> LayerValues
        {
            get
            {
                return this.GetTable<LayerValue>();
            }
        }

        public Devart.Data.Linq.Table<AnnotationSpan> AnnotationSpans
        {
            get
            {
                return this.GetTable<AnnotationSpan>();
            }
        }
    }
}

namespace CorpusExplorer.Sdk.Db.SQLite.Model.FullAccess
{

    /// <summary>
    /// There are no comments for CorpusExplorer.Sdk.Db.SQLite.Model.FullAccess.Corpus in the schema.
    /// </summary>
    [Table(Name = @"Corpora")]
    public partial class Corpus : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private System.Guid _GUID;

        private string _Displayname;
        #pragma warning restore 0649

        private EntitySet<CorpusMetadata> _CorpusMetadatas;

        private EntitySet<Document> _Documents;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnGUIDChanging(System.Guid value);
        partial void OnGUIDChanged();
        partial void OnDisplaynameChanging(string value);
        partial void OnDisplaynameChanged();
        #endregion

        public Corpus()
        {
            this._CorpusMetadatas = new EntitySet<CorpusMetadata>(new Action<CorpusMetadata>(this.attach_CorpusMetadatas), new Action<CorpusMetadata>(this.detach_CorpusMetadatas));
            this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "integer NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GUID in the schema.
        /// </summary>
        [Column(Storage = "_GUID", CanBeNull = false, DbType = "guid NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Guid GUID
        {
            get
            {
                return this._GUID;
            }
            set
            {
                if (this._GUID != value)
                {
                    this.OnGUIDChanging(value);
                    this.SendPropertyChanging("GUID");
                    this._GUID = value;
                    this.SendPropertyChanged("GUID");
                    this.OnGUIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Displayname in the schema.
        /// </summary>
        [Column(Storage = "_Displayname", DbType = "text", UpdateCheck = UpdateCheck.Never)]
        public string Displayname
        {
            get
            {
                return this._Displayname;
            }
            set
            {
                if (this._Displayname != value)
                {
                    this.OnDisplaynameChanging(value);
                    this.SendPropertyChanging("Displayname");
                    this._Displayname = value;
                    this.SendPropertyChanged("Displayname");
                    this.OnDisplaynameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CorpusMetadatas in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Corpus_CorpusMetadata", Storage="_CorpusMetadatas", ThisKey="ID", OtherKey="CorpusID")]
        public EntitySet<CorpusMetadata> CorpusMetadatas
        {
            get
            {
                return this._CorpusMetadatas;
            }
            set
            {
                this._CorpusMetadatas.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Documents in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Corpus_Document", Storage="_Documents", ThisKey="ID", OtherKey="CorpusID")]
        public EntitySet<Document> Documents
        {
            get
            {
                return this._Documents;
            }
            set
            {
                this._Documents.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CorpusMetadatas(CorpusMetadata entity)
        {
            this.SendPropertyChanging("CorpusMetadatas");
            entity.Corpus = this;
        }
    
        private void detach_CorpusMetadatas(CorpusMetadata entity)
        {
            this.SendPropertyChanging("CorpusMetadatas");
            entity.Corpus = null;
        }

        private void attach_Documents(Document entity)
        {
            this.SendPropertyChanging("Documents");
            entity.Corpus = this;
        }
    
        private void detach_Documents(Document entity)
        {
            this.SendPropertyChanging("Documents");
            entity.Corpus = null;
        }
    }

    /// <summary>
    /// There are no comments for CorpusExplorer.Sdk.Db.SQLite.Model.FullAccess.CorpusMetadata in the schema.
    /// </summary>
    [Table(Name = @"CorpusMetadatas")]
    public partial class CorpusMetadata : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CorpusID;

        private string _Label;

        private string _Value;
        #pragma warning restore 0649

        private EntityRef<Corpus> _Corpus;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCorpusIDChanging(int value);
        partial void OnCorpusIDChanged();
        partial void OnLabelChanging(string value);
        partial void OnLabelChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();
        #endregion

        public CorpusMetadata()
        {
            this._Corpus  = default(EntityRef<Corpus>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CorpusID in the schema.
        /// </summary>
        [Column(Storage = "_CorpusID", CanBeNull = false, DbType = "integer NOT NULL", IsPrimaryKey = true)]
        public int CorpusID
        {
            get
            {
                return this._CorpusID;
            }
            set
            {
                if (this._CorpusID != value)
                {
                    if (this._Corpus.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCorpusIDChanging(value);
                    this.SendPropertyChanging("CorpusID");
                    this._CorpusID = value;
                    this.SendPropertyChanged("CorpusID");
                    this.OnCorpusIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Label in the schema.
        /// </summary>
        [Column(Storage = "_Label", CanBeNull = false, DbType = "text NOT NULL", IsPrimaryKey = true)]
        public string Label
        {
            get
            {
                return this._Label;
            }
            set
            {
                if (this._Label != value)
                {
                    this.OnLabelChanging(value);
                    this.SendPropertyChanging("Label");
                    this._Label = value;
                    this.SendPropertyChanged("Label");
                    this.OnLabelChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Value in the schema.
        /// </summary>
        [Column(Storage = "_Value", DbType = "text", UpdateCheck = UpdateCheck.Never)]
        public string Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if (this._Value != value)
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging("Value");
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Corpus in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Corpus_CorpusMetadata", Storage="_Corpus", ThisKey="CorpusID", OtherKey="ID", IsForeignKey=true)]
        public Corpus Corpus
        {
            get
            {
                return this._Corpus.Entity;
            }
            set
            {
                Corpus previousValue = this._Corpus.Entity;
                if ((previousValue != value) || (this._Corpus.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Corpus");
                    if (previousValue != null)
                    {
                        this._Corpus.Entity = null;
                        previousValue.CorpusMetadatas.Remove(this);
                    }
                    this._Corpus.Entity = value;
                    if (value != null)
                    {
                        this._CorpusID = value.ID;
                        value.CorpusMetadatas.Add(this);
                    }
                    else
                    {
                        this._CorpusID = default(int);
                    }
                    this.SendPropertyChanged("Corpus");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for CorpusExplorer.Sdk.Db.SQLite.Model.FullAccess.Document in the schema.
    /// </summary>
    [Table(Name = @"Documents")]
    public partial class Document : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private System.Guid _GUID;

        private int _CorpusID;
        #pragma warning restore 0649

        private EntityRef<Corpus> _Corpus;

        private EntitySet<DocumentMetadata> _DocumentMetadatas;

        private EntitySet<Token> _Tokens;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnGUIDChanging(System.Guid value);
        partial void OnGUIDChanged();
        partial void OnCorpusIDChanging(int value);
        partial void OnCorpusIDChanged();
        #endregion

        public Document()
        {
            this._Corpus  = default(EntityRef<Corpus>);
            this._DocumentMetadatas = new EntitySet<DocumentMetadata>(new Action<DocumentMetadata>(this.attach_DocumentMetadatas), new Action<DocumentMetadata>(this.detach_DocumentMetadatas));
            this._Tokens = new EntitySet<Token>(new Action<Token>(this.attach_Tokens), new Action<Token>(this.detach_Tokens));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "integer NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GUID in the schema.
        /// </summary>
        [Column(Storage = "_GUID", CanBeNull = false, DbType = "guid NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Guid GUID
        {
            get
            {
                return this._GUID;
            }
            set
            {
                if (this._GUID != value)
                {
                    this.OnGUIDChanging(value);
                    this.SendPropertyChanging("GUID");
                    this._GUID = value;
                    this.SendPropertyChanged("GUID");
                    this.OnGUIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CorpusID in the schema.
        /// </summary>
        [Column(Storage = "_CorpusID", CanBeNull = false, DbType = "integer NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CorpusID
        {
            get
            {
                return this._CorpusID;
            }
            set
            {
                if (this._CorpusID != value)
                {
                    if (this._Corpus.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCorpusIDChanging(value);
                    this.SendPropertyChanging("CorpusID");
                    this._CorpusID = value;
                    this.SendPropertyChanged("CorpusID");
                    this.OnCorpusIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Corpus in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Corpus_Document", Storage="_Corpus", ThisKey="CorpusID", OtherKey="ID", IsForeignKey=true)]
        public Corpus Corpus
        {
            get
            {
                return this._Corpus.Entity;
            }
            set
            {
                Corpus previousValue = this._Corpus.Entity;
                if ((previousValue != value) || (this._Corpus.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Corpus");
                    if (previousValue != null)
                    {
                        this._Corpus.Entity = null;
                        previousValue.Documents.Remove(this);
                    }
                    this._Corpus.Entity = value;
                    if (value != null)
                    {
                        this._CorpusID = value.ID;
                        value.Documents.Add(this);
                    }
                    else
                    {
                        this._CorpusID = default(int);
                    }
                    this.SendPropertyChanged("Corpus");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DocumentMetadatas in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Document_DocumentMetadata", Storage="_DocumentMetadatas", ThisKey="ID", OtherKey="DocumentID")]
        public EntitySet<DocumentMetadata> DocumentMetadatas
        {
            get
            {
                return this._DocumentMetadatas;
            }
            set
            {
                this._DocumentMetadatas.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Tokens in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Document_Token", Storage="_Tokens", ThisKey="ID", OtherKey="DocumentID")]
        public EntitySet<Token> Tokens
        {
            get
            {
                return this._Tokens;
            }
            set
            {
                this._Tokens.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DocumentMetadatas(DocumentMetadata entity)
        {
            this.SendPropertyChanging("DocumentMetadatas");
            entity.Document = this;
        }
    
        private void detach_DocumentMetadatas(DocumentMetadata entity)
        {
            this.SendPropertyChanging("DocumentMetadatas");
            entity.Document = null;
        }

        private void attach_Tokens(Token entity)
        {
            this.SendPropertyChanging("Tokens");
            entity.Document = this;
        }
    
        private void detach_Tokens(Token entity)
        {
            this.SendPropertyChanging("Tokens");
            entity.Document = null;
        }
    }

    /// <summary>
    /// There are no comments for CorpusExplorer.Sdk.Db.SQLite.Model.FullAccess.DocumentMetadata in the schema.
    /// </summary>
    [Table(Name = @"DocumentMetadatas")]
    public partial class DocumentMetadata : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _DocumentID;

        private string _Label;

        private string _Value;
        #pragma warning restore 0649

        private EntityRef<Document> _Document;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnDocumentIDChanging(int value);
        partial void OnDocumentIDChanged();
        partial void OnLabelChanging(string value);
        partial void OnLabelChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();
        #endregion

        public DocumentMetadata()
        {
            this._Document  = default(EntityRef<Document>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DocumentID in the schema.
        /// </summary>
        [Column(Storage = "_DocumentID", CanBeNull = false, DbType = "integer NOT NULL", IsPrimaryKey = true)]
        public int DocumentID
        {
            get
            {
                return this._DocumentID;
            }
            set
            {
                if (this._DocumentID != value)
                {
                    if (this._Document.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDocumentIDChanging(value);
                    this.SendPropertyChanging("DocumentID");
                    this._DocumentID = value;
                    this.SendPropertyChanged("DocumentID");
                    this.OnDocumentIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Label in the schema.
        /// </summary>
        [Column(Storage = "_Label", CanBeNull = false, DbType = "text NOT NULL", IsPrimaryKey = true)]
        public string Label
        {
            get
            {
                return this._Label;
            }
            set
            {
                if (this._Label != value)
                {
                    this.OnLabelChanging(value);
                    this.SendPropertyChanging("Label");
                    this._Label = value;
                    this.SendPropertyChanged("Label");
                    this.OnLabelChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Value in the schema.
        /// </summary>
        [Column(Storage = "_Value", DbType = "text", UpdateCheck = UpdateCheck.Never)]
        public string Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if (this._Value != value)
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging("Value");
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Document in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Document_DocumentMetadata", Storage="_Document", ThisKey="DocumentID", OtherKey="ID", IsForeignKey=true)]
        public Document Document
        {
            get
            {
                return this._Document.Entity;
            }
            set
            {
                Document previousValue = this._Document.Entity;
                if ((previousValue != value) || (this._Document.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Document");
                    if (previousValue != null)
                    {
                        this._Document.Entity = null;
                        previousValue.DocumentMetadatas.Remove(this);
                    }
                    this._Document.Entity = value;
                    if (value != null)
                    {
                        this._DocumentID = value.ID;
                        value.DocumentMetadatas.Add(this);
                    }
                    else
                    {
                        this._DocumentID = default(int);
                    }
                    this.SendPropertyChanged("Document");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for CorpusExplorer.Sdk.Db.SQLite.Model.FullAccess.Token in the schema.
    /// </summary>
    [Table(Name = @"Tokens")]
    public partial class Token : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private ulong _ID;

        private int _DocumentID;

        private int _TokenIndex;
        #pragma warning restore 0649

        private EntitySet<Annotation> _Annotations;

        private EntityRef<Document> _Document;

        private EntitySet<AnnotationSpan> _AnnotationSpanStarts;

        private EntitySet<AnnotationSpan> _AnnotationSpanEnds;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(ulong value);
        partial void OnIDChanged();
        partial void OnDocumentIDChanging(int value);
        partial void OnDocumentIDChanged();
        partial void OnTokenIndexChanging(int value);
        partial void OnTokenIndexChanged();
        #endregion

        public Token()
        {
            this._Annotations = new EntitySet<Annotation>(new Action<Annotation>(this.attach_Annotations), new Action<Annotation>(this.detach_Annotations));
            this._Document  = default(EntityRef<Document>);
            this._AnnotationSpanStarts = new EntitySet<AnnotationSpan>(new Action<AnnotationSpan>(this.attach_AnnotationSpanStarts), new Action<AnnotationSpan>(this.detach_AnnotationSpanStarts));
            this._AnnotationSpanEnds = new EntitySet<AnnotationSpan>(new Action<AnnotationSpan>(this.attach_AnnotationSpanEnds), new Action<AnnotationSpan>(this.detach_AnnotationSpanEnds));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "integer NOT NULL", IsPrimaryKey = true)]
        public ulong ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DocumentID in the schema.
        /// </summary>
        [Column(Storage = "_DocumentID", CanBeNull = false, DbType = "integer NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int DocumentID
        {
            get
            {
                return this._DocumentID;
            }
            set
            {
                if (this._DocumentID != value)
                {
                    if (this._Document.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDocumentIDChanging(value);
                    this.SendPropertyChanging("DocumentID");
                    this._DocumentID = value;
                    this.SendPropertyChanged("DocumentID");
                    this.OnDocumentIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TokenIndex in the schema.
        /// </summary>
        [Column(Storage = "_TokenIndex", CanBeNull = false, DbType = "integer NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int TokenIndex
        {
            get
            {
                return this._TokenIndex;
            }
            set
            {
                if (this._TokenIndex != value)
                {
                    this.OnTokenIndexChanging(value);
                    this.SendPropertyChanging("TokenIndex");
                    this._TokenIndex = value;
                    this.SendPropertyChanged("TokenIndex");
                    this.OnTokenIndexChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Annotations in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Token_Annotation", Storage="_Annotations", ThisKey="ID", OtherKey="TokenID")]
        public EntitySet<Annotation> Annotations
        {
            get
            {
                return this._Annotations;
            }
            set
            {
                this._Annotations.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Document in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Document_Token", Storage="_Document", ThisKey="DocumentID", OtherKey="ID", IsForeignKey=true)]
        public Document Document
        {
            get
            {
                return this._Document.Entity;
            }
            set
            {
                Document previousValue = this._Document.Entity;
                if ((previousValue != value) || (this._Document.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Document");
                    if (previousValue != null)
                    {
                        this._Document.Entity = null;
                        previousValue.Tokens.Remove(this);
                    }
                    this._Document.Entity = value;
                    if (value != null)
                    {
                        this._DocumentID = value.ID;
                        value.Tokens.Add(this);
                    }
                    else
                    {
                        this._DocumentID = default(int);
                    }
                    this.SendPropertyChanged("Document");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AnnotationSpanStarts in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Token_AnnotationSpan", Storage="_AnnotationSpanStarts", ThisKey="ID", OtherKey="TokenStartID")]
        public EntitySet<AnnotationSpan> AnnotationSpanStarts
        {
            get
            {
                return this._AnnotationSpanStarts;
            }
            set
            {
                this._AnnotationSpanStarts.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for AnnotationSpanEnds in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Token_AnnotationSpan1", Storage="_AnnotationSpanEnds", ThisKey="ID", OtherKey="TokenEndID")]
        public EntitySet<AnnotationSpan> AnnotationSpanEnds
        {
            get
            {
                return this._AnnotationSpanEnds;
            }
            set
            {
                this._AnnotationSpanEnds.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Annotations(Annotation entity)
        {
            this.SendPropertyChanging("Annotations");
            entity.Token = this;
        }
    
        private void detach_Annotations(Annotation entity)
        {
            this.SendPropertyChanging("Annotations");
            entity.Token = null;
        }

        private void attach_AnnotationSpanStarts(AnnotationSpan entity)
        {
            this.SendPropertyChanging("AnnotationSpanStarts");
            entity.TokenStart = this;
        }
    
        private void detach_AnnotationSpanStarts(AnnotationSpan entity)
        {
            this.SendPropertyChanging("AnnotationSpanStarts");
            entity.TokenStart = null;
        }

        private void attach_AnnotationSpanEnds(AnnotationSpan entity)
        {
            this.SendPropertyChanging("AnnotationSpanEnds");
            entity.TokenEnd = this;
        }
    
        private void detach_AnnotationSpanEnds(AnnotationSpan entity)
        {
            this.SendPropertyChanging("AnnotationSpanEnds");
            entity.TokenEnd = null;
        }
    }

    /// <summary>
    /// There are no comments for CorpusExplorer.Sdk.Db.SQLite.Model.FullAccess.Annotation in the schema.
    /// </summary>
    [Table(Name = @"Annotations")]
    public partial class Annotation : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private ulong _ID;

        private ulong _TokenID;

        private ulong _LayerValueID;
        #pragma warning restore 0649

        private EntityRef<Token> _Token;

        private EntityRef<LayerValue> _LayerValue;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(ulong value);
        partial void OnIDChanged();
        partial void OnTokenIDChanging(ulong value);
        partial void OnTokenIDChanged();
        partial void OnLayerValueIDChanging(ulong value);
        partial void OnLayerValueIDChanged();
        #endregion

        public Annotation()
        {
            this._Token  = default(EntityRef<Token>);
            this._LayerValue  = default(EntityRef<LayerValue>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "integer NOT NULL", IsPrimaryKey = true)]
        public ulong ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TokenID in the schema.
        /// </summary>
        [Column(Storage = "_TokenID", CanBeNull = false, DbType = "integer NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public ulong TokenID
        {
            get
            {
                return this._TokenID;
            }
            set
            {
                if (this._TokenID != value)
                {
                    if (this._Token.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTokenIDChanging(value);
                    this.SendPropertyChanging("TokenID");
                    this._TokenID = value;
                    this.SendPropertyChanged("TokenID");
                    this.OnTokenIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LayerValueID in the schema.
        /// </summary>
        [Column(Storage = "_LayerValueID", CanBeNull = false, DbType = "integer NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public ulong LayerValueID
        {
            get
            {
                return this._LayerValueID;
            }
            set
            {
                if (this._LayerValueID != value)
                {
                    if (this._LayerValue.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnLayerValueIDChanging(value);
                    this.SendPropertyChanging("LayerValueID");
                    this._LayerValueID = value;
                    this.SendPropertyChanged("LayerValueID");
                    this.OnLayerValueIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Token in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Token_Annotation", Storage="_Token", ThisKey="TokenID", OtherKey="ID", IsForeignKey=true)]
        public Token Token
        {
            get
            {
                return this._Token.Entity;
            }
            set
            {
                Token previousValue = this._Token.Entity;
                if ((previousValue != value) || (this._Token.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Token");
                    if (previousValue != null)
                    {
                        this._Token.Entity = null;
                        previousValue.Annotations.Remove(this);
                    }
                    this._Token.Entity = value;
                    if (value != null)
                    {
                        this._TokenID = value.ID;
                        value.Annotations.Add(this);
                    }
                    else
                    {
                        this._TokenID = default(ulong);
                    }
                    this.SendPropertyChanged("Token");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LayerValue in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LayerValue_Annotation", Storage="_LayerValue", ThisKey="LayerValueID", OtherKey="ID", IsForeignKey=true)]
        public LayerValue LayerValue
        {
            get
            {
                return this._LayerValue.Entity;
            }
            set
            {
                LayerValue previousValue = this._LayerValue.Entity;
                if ((previousValue != value) || (this._LayerValue.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("LayerValue");
                    if (previousValue != null)
                    {
                        this._LayerValue.Entity = null;
                        previousValue.Annotations.Remove(this);
                    }
                    this._LayerValue.Entity = value;
                    if (value != null)
                    {
                        this._LayerValueID = value.ID;
                        value.Annotations.Add(this);
                    }
                    else
                    {
                        this._LayerValueID = default(ulong);
                    }
                    this.SendPropertyChanged("LayerValue");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for CorpusExplorer.Sdk.Db.SQLite.Model.FullAccess.Layer in the schema.
    /// </summary>
    [Table(Name = @"Layers")]
    public partial class Layer : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private System.Guid _GUID;

        private string _Displayname;
        #pragma warning restore 0649

        private EntitySet<LayerValue> _LayerValues;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnGUIDChanging(System.Guid value);
        partial void OnGUIDChanged();
        partial void OnDisplaynameChanging(string value);
        partial void OnDisplaynameChanged();
        #endregion

        public Layer()
        {
            this._LayerValues = new EntitySet<LayerValue>(new Action<LayerValue>(this.attach_LayerValues), new Action<LayerValue>(this.detach_LayerValues));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "integer NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GUID in the schema.
        /// </summary>
        [Column(Storage = "_GUID", CanBeNull = false, DbType = "guid NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Guid GUID
        {
            get
            {
                return this._GUID;
            }
            set
            {
                if (this._GUID != value)
                {
                    this.OnGUIDChanging(value);
                    this.SendPropertyChanging("GUID");
                    this._GUID = value;
                    this.SendPropertyChanged("GUID");
                    this.OnGUIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Displayname in the schema.
        /// </summary>
        [Column(Storage = "_Displayname", CanBeNull = false, DbType = "text NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Displayname
        {
            get
            {
                return this._Displayname;
            }
            set
            {
                if (this._Displayname != value)
                {
                    this.OnDisplaynameChanging(value);
                    this.SendPropertyChanging("Displayname");
                    this._Displayname = value;
                    this.SendPropertyChanged("Displayname");
                    this.OnDisplaynameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LayerValues in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Layer_LayerValue", Storage="_LayerValues", ThisKey="ID", OtherKey="LayerID")]
        public EntitySet<LayerValue> LayerValues
        {
            get
            {
                return this._LayerValues;
            }
            set
            {
                this._LayerValues.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_LayerValues(LayerValue entity)
        {
            this.SendPropertyChanging("LayerValues");
            entity.Layer = this;
        }
    
        private void detach_LayerValues(LayerValue entity)
        {
            this.SendPropertyChanging("LayerValues");
            entity.Layer = null;
        }
    }

    /// <summary>
    /// There are no comments for CorpusExplorer.Sdk.Db.SQLite.Model.FullAccess.LayerValue in the schema.
    /// </summary>
    [Table(Name = @"LayerValues")]
    public partial class LayerValue : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private ulong _ID;

        private int _LayerID;

        private string _Value;
        #pragma warning restore 0649

        private EntitySet<Annotation> _Annotations;

        private EntityRef<Layer> _Layer;

        private EntitySet<AnnotationSpan> _AnnotationSpans;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(ulong value);
        partial void OnIDChanged();
        partial void OnLayerIDChanging(int value);
        partial void OnLayerIDChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();
        #endregion

        public LayerValue()
        {
            this._Annotations = new EntitySet<Annotation>(new Action<Annotation>(this.attach_Annotations), new Action<Annotation>(this.detach_Annotations));
            this._Layer  = default(EntityRef<Layer>);
            this._AnnotationSpans = new EntitySet<AnnotationSpan>(new Action<AnnotationSpan>(this.attach_AnnotationSpans), new Action<AnnotationSpan>(this.detach_AnnotationSpans));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "integer NOT NULL", IsPrimaryKey = true)]
        public ulong ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LayerID in the schema.
        /// </summary>
        [Column(Storage = "_LayerID", CanBeNull = false, DbType = "integer NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int LayerID
        {
            get
            {
                return this._LayerID;
            }
            set
            {
                if (this._LayerID != value)
                {
                    if (this._Layer.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnLayerIDChanging(value);
                    this.SendPropertyChanging("LayerID");
                    this._LayerID = value;
                    this.SendPropertyChanged("LayerID");
                    this.OnLayerIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Value in the schema.
        /// </summary>
        [Column(Storage = "_Value", DbType = "text", UpdateCheck = UpdateCheck.Never)]
        public string Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if (this._Value != value)
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging("Value");
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Annotations in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LayerValue_Annotation", Storage="_Annotations", ThisKey="ID", OtherKey="LayerValueID")]
        public EntitySet<Annotation> Annotations
        {
            get
            {
                return this._Annotations;
            }
            set
            {
                this._Annotations.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Layer in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Layer_LayerValue", Storage="_Layer", ThisKey="LayerID", OtherKey="ID", IsForeignKey=true)]
        public Layer Layer
        {
            get
            {
                return this._Layer.Entity;
            }
            set
            {
                Layer previousValue = this._Layer.Entity;
                if ((previousValue != value) || (this._Layer.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Layer");
                    if (previousValue != null)
                    {
                        this._Layer.Entity = null;
                        previousValue.LayerValues.Remove(this);
                    }
                    this._Layer.Entity = value;
                    if (value != null)
                    {
                        this._LayerID = value.ID;
                        value.LayerValues.Add(this);
                    }
                    else
                    {
                        this._LayerID = default(int);
                    }
                    this.SendPropertyChanged("Layer");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AnnotationSpans in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LayerValue_AnnotationSpan", Storage="_AnnotationSpans", ThisKey="ID", OtherKey="LayerValueID")]
        public EntitySet<AnnotationSpan> AnnotationSpans
        {
            get
            {
                return this._AnnotationSpans;
            }
            set
            {
                this._AnnotationSpans.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Annotations(Annotation entity)
        {
            this.SendPropertyChanging("Annotations");
            entity.LayerValue = this;
        }
    
        private void detach_Annotations(Annotation entity)
        {
            this.SendPropertyChanging("Annotations");
            entity.LayerValue = null;
        }

        private void attach_AnnotationSpans(AnnotationSpan entity)
        {
            this.SendPropertyChanging("AnnotationSpans");
            entity.LayerValue = this;
        }
    
        private void detach_AnnotationSpans(AnnotationSpan entity)
        {
            this.SendPropertyChanging("AnnotationSpans");
            entity.LayerValue = null;
        }
    }

    /// <summary>
    /// There are no comments for CorpusExplorer.Sdk.Db.SQLite.Model.FullAccess.AnnotationSpan in the schema.
    /// </summary>
    [Table(Name = @"AnnotationSpans")]
    public partial class AnnotationSpan : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private ulong _ID;

        private ulong _TokenStartID;

        private ulong _TokenEndID;

        private ulong _LayerValueID;
        #pragma warning restore 0649

        private EntityRef<Token> _TokenStart;

        private EntityRef<Token> _TokenEnd;

        private EntityRef<LayerValue> _LayerValue;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(ulong value);
        partial void OnIDChanged();
        partial void OnTokenStartIDChanging(ulong value);
        partial void OnTokenStartIDChanged();
        partial void OnTokenEndIDChanging(ulong value);
        partial void OnTokenEndIDChanged();
        partial void OnLayerValueIDChanging(ulong value);
        partial void OnLayerValueIDChanged();
        #endregion

        public AnnotationSpan()
        {
            this._TokenStart  = default(EntityRef<Token>);
            this._TokenEnd  = default(EntityRef<Token>);
            this._LayerValue  = default(EntityRef<LayerValue>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "integer NOT NULL", IsPrimaryKey = true)]
        public ulong ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TokenStartID in the schema.
        /// </summary>
        [Column(Storage = "_TokenStartID", CanBeNull = false, DbType = "integer NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public ulong TokenStartID
        {
            get
            {
                return this._TokenStartID;
            }
            set
            {
                if (this._TokenStartID != value)
                {
                    if (this._TokenStart.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTokenStartIDChanging(value);
                    this.SendPropertyChanging("TokenStartID");
                    this._TokenStartID = value;
                    this.SendPropertyChanged("TokenStartID");
                    this.OnTokenStartIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TokenEndID in the schema.
        /// </summary>
        [Column(Storage = "_TokenEndID", CanBeNull = false, DbType = "integer NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public ulong TokenEndID
        {
            get
            {
                return this._TokenEndID;
            }
            set
            {
                if (this._TokenEndID != value)
                {
                    if (this._TokenEnd.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTokenEndIDChanging(value);
                    this.SendPropertyChanging("TokenEndID");
                    this._TokenEndID = value;
                    this.SendPropertyChanged("TokenEndID");
                    this.OnTokenEndIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LayerValueID in the schema.
        /// </summary>
        [Column(Storage = "_LayerValueID", CanBeNull = false, DbType = "integer NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public ulong LayerValueID
        {
            get
            {
                return this._LayerValueID;
            }
            set
            {
                if (this._LayerValueID != value)
                {
                    if (this._LayerValue.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnLayerValueIDChanging(value);
                    this.SendPropertyChanging("LayerValueID");
                    this._LayerValueID = value;
                    this.SendPropertyChanged("LayerValueID");
                    this.OnLayerValueIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TokenStart in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Token_AnnotationSpan", Storage="_TokenStart", ThisKey="TokenStartID", OtherKey="ID", IsForeignKey=true)]
        public Token TokenStart
        {
            get
            {
                return this._TokenStart.Entity;
            }
            set
            {
                Token previousValue = this._TokenStart.Entity;
                if ((previousValue != value) || (this._TokenStart.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("TokenStart");
                    if (previousValue != null)
                    {
                        this._TokenStart.Entity = null;
                        previousValue.AnnotationSpanStarts.Remove(this);
                    }
                    this._TokenStart.Entity = value;
                    if (value != null)
                    {
                        this._TokenStartID = value.ID;
                        value.AnnotationSpanStarts.Add(this);
                    }
                    else
                    {
                        this._TokenStartID = default(ulong);
                    }
                    this.SendPropertyChanged("TokenStart");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TokenEnd in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Token_AnnotationSpan1", Storage="_TokenEnd", ThisKey="TokenEndID", OtherKey="ID", IsForeignKey=true)]
        public Token TokenEnd
        {
            get
            {
                return this._TokenEnd.Entity;
            }
            set
            {
                Token previousValue = this._TokenEnd.Entity;
                if ((previousValue != value) || (this._TokenEnd.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("TokenEnd");
                    if (previousValue != null)
                    {
                        this._TokenEnd.Entity = null;
                        previousValue.AnnotationSpanEnds.Remove(this);
                    }
                    this._TokenEnd.Entity = value;
                    if (value != null)
                    {
                        this._TokenEndID = value.ID;
                        value.AnnotationSpanEnds.Add(this);
                    }
                    else
                    {
                        this._TokenEndID = default(ulong);
                    }
                    this.SendPropertyChanged("TokenEnd");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LayerValue in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LayerValue_AnnotationSpan", Storage="_LayerValue", ThisKey="LayerValueID", OtherKey="ID", IsForeignKey=true)]
        public LayerValue LayerValue
        {
            get
            {
                return this._LayerValue.Entity;
            }
            set
            {
                LayerValue previousValue = this._LayerValue.Entity;
                if ((previousValue != value) || (this._LayerValue.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("LayerValue");
                    if (previousValue != null)
                    {
                        this._LayerValue.Entity = null;
                        previousValue.AnnotationSpans.Remove(this);
                    }
                    this._LayerValue.Entity = value;
                    if (value != null)
                    {
                        this._LayerValueID = value.ID;
                        value.AnnotationSpans.Add(this);
                    }
                    else
                    {
                        this._LayerValueID = default(ulong);
                    }
                    this.SendPropertyChanged("LayerValue");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
